import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, mkdirSync, readFileSync, rmSync } from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const isWatch = !prod && !process.argv.includes("--no-watch");

// Get version from package.json
const packageJson = JSON.parse(readFileSync("package.json", "utf8"));
const version = packageJson.version;

// Always use version number for output directory
const outputDir = `dist/workspace-filegroups-${version}`;

// Clean dist folder to prevent old version accumulation
rmSync("dist", { recursive: true, force: true });
mkdirSync(outputDir, { recursive: true });

// Copy static files function
function copyStaticFiles() {
	copyFileSync("manifest.json", `${outputDir}/manifest.json`);
	copyFileSync("styles.css", `${outputDir}/styles.css`);
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["./src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: `${outputDir}/main.js`,
});

if (isWatch) {
	// Development mode with watching
	console.log(`üîç Starting development build with file watching...`);
	console.log(`üìÅ Output: ${outputDir}/`);
	copyStaticFiles();
	await context.watch();
	console.log("üëÄ Watching for changes... Press Ctrl+C to stop.");
} else {
	// Single build
	await context.rebuild();
	copyStaticFiles();
	
	if (prod) {
		console.log(`\nüì¶ Production build complete: ${outputDir}/`);
		console.log("  ‚úì main.js");
		console.log("  ‚úì manifest.json"); 
		console.log("  ‚úì styles.css");
		console.log("\nüöÄ Ready for packaging!");
	} else {
		console.log(`\nüì¶ Development build complete: ${outputDir}/`);
		console.log("  ‚úì main.js");
		console.log("  ‚úì manifest.json"); 
		console.log("  ‚úì styles.css");
		console.log(`\nüí° Install by copying ${outputDir}/ to your vault's .obsidian/plugins/ directory`);
	}
	
	process.exit(0);
}